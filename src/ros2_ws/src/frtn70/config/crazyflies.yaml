# named list of all robots
robots:
  cf1:
    enabled: false
    uri: radio://0/90/2M/1
    initial_position: [0.0, 0.5, 0.0]
    type: cf21  # see robot_types

  cf2:
    enabled: false
    uri: radio://0/90/2M/2
    initial_position: [-0.5, 0.0, 0.0]
    type: cf21  # see robot_types

  cf3:
    enabled: true
    uri: radio://0/90/2M/3
    initial_position: [-0.5, 0.5, 0.0]
    type: cf21  # see robot_types

  cf4:
    enabled: false
    uri: radio://0/90/2M/4
    initial_position: [0.5, 0.5, 0.0]
    type: cf21  # see robot_types

  cf5:
    enabled: true
    uri: radio://0/90/2M/5
    initial_position: [-0.5, -0.5, 0.0]
    type: cf21  # see robot_types

  cf6:
    enabled: false
    uri: radio://0/90/2M/6
    initial_position: [-0.8, -0.8, 0.0]
    type: cf21  # see robot_types


# Definition of the various robot types
robot_types:
  cf21:
    motion_capture:
      enabled: true
      # only if enabled; see motion_capture.yaml
      marker: default
      dynamics: default
    big_quad: false
    battery:
      voltage_warning: 3.8  # V
      voltage_critical: 3.7 # V

  cf21_mocap_deck:
    motion_capture:
      enabled: true
      # only if enabled; see motion_capture.yaml
      marker: mocap_deck
      dynamics: default
    big_quad: false
    battery:
      voltage_warning: 3.8  # V
      voltage_critical: 3.7 # V

    # firmware_params:
    #   kalman:
    #     pNAcc_xy: 1.0 # default 0.5

# global settings for all robots
all:
  # firmware logging for all drones (use robot_types/type_name to set per type, or
  # robots/drone_name to set per drone)
  firmware_logging:
    enabled: true
    default_topics:
      pose:
        frequency: 10 # Hz
      status:
        frequency: 1 # Hz
    custom_topics:
      motorspeed: 
        frequency: 10
        vars: ["motor.m1", "motor.m2", "motor.m3", "motor.m4"]
      motorvars:
        frequency: 10
        vars: ["motor.m1req", "motor.m2req", "motor.m3req", "motor.m4req"]
      lighthouseInfo:
        frequency: 10
        vars: ["lighthouse.bsAvailable", "lighthouse.bsActive", "lighthouse.status", "lighthouse.comSync"]
      thrust:
        frequency: 10
        vars: ["controller.cmd_thrust", "stabilizer.thrust", "controller.actuatorThrust"]
      flightStatus:
        frequency: 5
        vars: ["sys.canfly", "sys.isTumbled", "sys.isFlying", "supervisor.info"]
  firmware_params:
    commander:
      enHighLevel: 0 # Used to be 1, seems to mean HighFull https://github.com/IMRCLab/crazyswarm2/blob/main/crazyflie_sim/crazyflie_sim/crazyflie_sil.py
    stabilizer:
      estimator: 2 # 1: complementary, 2: kalman
      controller: 2 # 1: PID, 2: mellinger
    #locSrv:
    #  extPosStdDev: 1e-3
    #  extQuatStdDev: 0.5e-1
    kalman:
      resetEstimation: 1
  broadcasts:
    num_repeats: 15 # number of times broadcast commands are repeated
    delay_between_repeats_ms: 1 # delay in milliseconds between individual repeats
